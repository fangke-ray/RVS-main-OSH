<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.osh.rvs.mapper.master.PartialPositionMapper">
<!-- partial_rank_bom -->
 <select id="searchPartialPosition" parameterType="PartialPositionEntity" resultType="PartialPositionEntity">
	SELECT 
		PA.CODE,
		PA.NAME,
		PPB.new_partial_id,
		ppb.bom_code,
		PO.PROCESS_CODE AS PROCESS_CODE,
		PPB.HISTORY_LIMIT_DATE,
	    O.NAME AS UPDATED_BY,
	    PA.UPDATED_TIME,
		PPB.ACTIVE_DATE,
		PPB.MODEL_ID,
		PPB.PARTIAL_ID,
		PA_P.CODE AS parent_partial_CODE,
		PPB.POSITION_ID,
		M.NAME AS MODEL_NAME
	 <if test="level!=null and level!='' ">		
		,PBS.PARTIAL_ID IS NOT NULL AS BOM,
		 p_use.p_rate as userate
	</if>  
	  FROM 
	     PARTIAL_POSITION_BELONG PPB
	  JOIN
		 MODEL M 
	  ON 
	     PPB.MODEL_ID =M.MODEL_ID
	  JOIN 
		 PARTIAL PA
	  ON 
		 PPB.PARTIAL_ID = PA.PARTIAL_ID
	  LEFT JOIN 
		 PARTIAL PA_P
	  ON 
		 PPB.parent_partial_id = PA_P.PARTIAL_ID
	  LEFT JOIN 
		 POSITION PO
	  ON 
		 PPB.POSITION_ID = PO.POSITION_ID
	  LEFT JOIN 
	     PARTIAL_WASTE_MODIFY_HISTORY PWMH
	  ON
	     PWMH.MODEL_ID = PPB.MODEL_ID
	  AND 
	     PWMH.OLD_PARTIAL_ID = PPB.PARTIAL_ID
	<if test="level!=null and level!='' ">
	  LEFT JOIN 
		PARTIAL_BOM_SET PBS 
		ON PPB.MODEL_ID = PBS.MODEL_ID
		AND  PBS.level = LEFT(#{level},1)
	  AND  PPB.PARTIAL_ID = PBS.PARTIAL_ID 
	  	  
	  left join
	   (
		select partial_id,
		count(1) / g_m.total * 100 as p_rate from (
		select m.material_id,partial_id from material_partial_detail mpd
		join material m
		on mpd.material_id = m.material_id
		WHERE m.model_id = #{model_id} and m.level = #{level}
		group by m.material_id,partial_id
		) g_mp
		join
		(
		select count(distinct m.material_id) as total from
		material_partial_detail mpd
		join material m
		on mpd.material_id = m.material_id
		WHERE m.model_id = #{model_id} and m.level = #{level}
		) g_m
		group by partial_id
		) p_use
	   on p_use.partial_id =PPB.partial_id 	   
	</if>  
      LEFT JOIN 
         OPERATOR O
      ON PWMH.UPDATED_BY=O.OPERATOR_ID	
	<where>
	<if test="history_limit_date!=null and history_limit_date!='' ">
		<![CDATA[
		  PPB.HISTORY_LIMIT_DATE>=CURRENT_TIMESTAMP
		]]>
	</if>	
	<if test="code!=null and code!='' ">
		<![CDATA[
	     AND PA.CODE LIKE CONCAT(#{code},'%')
		]]>
	</if>
	<if test="model_id!=null and model_id!='' ">
		<![CDATA[
	     AND PPB.MODEL_ID=#{model_id}
		]]>
	</if>
	<if test="partial_id!=null and partial_id!='' ">
		<![CDATA[
		 AND  PPB.PARTIAL_ID=#{partial_id}
		]]>
	</if>
	<if test="position_id!=null and position_id!='' ">
		<![CDATA[
		 AND  PPB.POSITION_ID=#{position_id}
		]]>
	</if>
    </where>
    ORDER BY
      PA.UPDATED_TIME
 </select>

 <select id="searchPartialPositionNew" parameterType="PartialPositionEntity" resultType="PartialPositionEntity">
	SELECT 
		PA.CODE,
		PA.NAME,
		PPB.new_partial_id,
		ppb.bom_code,
		ppb.QUANTITY,
		PO.PROCESS_CODE AS PROCESS_CODE,
		PPB.HISTORY_LIMIT_DATE,
	    O.NAME AS UPDATED_BY,
	    PA.UPDATED_TIME,
		PPB.ACTIVE_DATE,
		PPB.MODEL_ID,
		PPB.PARTIAL_ID,
		PA_P.CODE AS parent_partial_CODE,
		PPB.POSITION_ID,
		M.NAME AS MODEL_NAME
	 <if test="level!=null and level!='' ">		
		,PBS.BOM_CODE IS NOT NULL AS BOM,
		 p_use.p_rate as userate
	</if>  
	  FROM 
	     PARTIAL_POSITION_BELONG PPB
	  JOIN
		 MODEL M 
	  ON 
	     PPB.MODEL_ID =M.MODEL_ID
	  JOIN 
		 PARTIAL PA
	  ON 
		 PPB.PARTIAL_ID = PA.PARTIAL_ID
	  LEFT JOIN 
		 PARTIAL PA_P
	  ON 
		 PPB.parent_partial_id = PA_P.PARTIAL_ID
	  LEFT JOIN 
		 POSITION PO
	  ON 
		 PPB.POSITION_ID = PO.POSITION_ID
	  LEFT JOIN 
	     PARTIAL_WASTE_MODIFY_HISTORY PWMH
	  ON
	     PWMH.MODEL_ID = PPB.MODEL_ID
	  AND 
	     PWMH.OLD_PARTIAL_ID = PPB.PARTIAL_ID
	<if test="level!=null and level!='' ">
	  LEFT JOIN 
		PARTIAL_RANK_BOM PBS 
		ON PPB.MODEL_ID = PBS.MODEL_ID
		AND  PBS.level = LEFT(#{level},1)
	  AND  PPB.BOM_CODE = PBS.BOM_CODE 
	  	  
	  left join
	   (
		select partial_id,
		count(1) / g_m.total * 100 as p_rate from (
		select m.material_id,partial_id from material_partial_detail mpd
		join material m
		on mpd.material_id = m.material_id
		WHERE m.model_id = #{model_id} and m.level = #{level}
		group by m.material_id,partial_id
		) g_mp
		join
		(
		select count(distinct m.material_id) as total from
		material_partial_detail mpd
		join material m
		on mpd.material_id = m.material_id
		WHERE m.model_id = #{model_id} and m.level = #{level}
		) g_m
		group by partial_id
		) p_use
	   on p_use.partial_id =PPB.partial_id 	   
	</if>  
      LEFT JOIN 
         OPERATOR O
      ON PWMH.UPDATED_BY=O.OPERATOR_ID	
	<where>
	<if test="history_limit_date!=null and history_limit_date!='' ">
		<![CDATA[
		  PPB.HISTORY_LIMIT_DATE>=CURRENT_TIMESTAMP
		]]>
	</if>	
	<if test="code!=null and code!='' ">
		<![CDATA[
	     AND PA.CODE LIKE CONCAT(#{code},'%')
		]]>
	</if>
	<if test="model_id!=null and model_id!='' ">
		<![CDATA[
	     AND PPB.MODEL_ID=#{model_id}
		]]>
	</if>
	<if test="partial_id!=null and partial_id!='' ">
		<![CDATA[
		 AND  PPB.PARTIAL_ID=#{partial_id}
		]]>
	</if>
	<if test="position_id!=null and position_id!='' ">
		<![CDATA[
		 AND  PPB.POSITION_ID=#{position_id}
		]]>
	</if>
    </where>
    ORDER BY
      PA.UPDATED_TIME
 </select>

  <select id="checkPartialPosition" resultType="String" parameterType="PartialPositionEntity">
   <![CDATA[ 
			SELECT partial_id
			FROM partial_position_belong
			WHERE 
			 model_id=#{model_id} and position_id =#{position_id}
		]]>
		<if test="partial_id!= null and partial_id!= '' ">
			<![CDATA[ 
				AND partial_id = #{partial_id}
			]]>
		</if>
		 
  </select>
 <insert id="insertPartialPosition" parameterType="PartialPositionEntity">
   INSERT INTO PARTIAL_POSITION_BELONG (
        MODEL_ID,                                                                
		PARTIAL_ID,
		BOM_CODE,                                                                                                   
		POSITION_ID,                                                                                                  
		NEW_PARTIAL_ID, 		                                                                                            
		PARENT_PARTIAL_ID,
		QUANTITY,
		ACTIVE_DATE,
		HISTORY_LIMIT_DATE
		)VALUES(
		#{model_id},#{partial_id},
		coalesce(#{bom_code},''),
		#{position_id},#{new_partial_id},
		coalesce(#{parent_partial_id},0),
		coalesce(#{quantity},1),
		#{active_date},
		coalesce(#{history_limit_date},'9999/12/31')
		)
 </insert>

 <delete id="clearPartialPositionOfModel" parameterType="PartialPositionEntity">
		 DELETE 
		 FROM
			 PARTIAL_POSITION_BELONG
		 WHERE
		 	MODEL_ID=#{model_id}
		 AND
		 	partial_id = #{partial_id}
 </delete>

  <delete id="deletePartialPosition" parameterType="String">
		 DELETE 
		 FROM
			 PARTIAL_POSITION_BELONG
		 WHERE
		 	MODEL_ID=#{model_id}
 </delete>

 <select id="getPartialPositionOfModel" resultType="PartialPositionEntity" parameterType="String">
		 SELECT 
		 	 `model_id`, `partial_id`, `bom_code`, `quantity`, `position_id`, `active_date`, `history_limit_date`, `new_partial_id`, `parent_partial_id`
		 FROM
			 PARTIAL_POSITION_BELONG
		 WHERE
		 	MODEL_ID=#{model_id}
 </select>

 <select id="getPartialPositionRevisionOfModel" resultType="PartialPositionEntity" parameterType="String">
		 SELECT 
		 	 `partial_id`, `new_partial_id`, `parent_partial_id`
		 FROM
			 PARTIAL_POSITION_BELONG
		 WHERE
		 	MODEL_ID=#{model_id}
		 AND
		 	`partial_id` != `new_partial_id`
 </select>

 <update id="updatePartialPosition" parameterType="PartialPositionEntity">
	   <![CDATA[
	    UPDATE 
	    	PARTIAL_POSITION_BELONG
	    SET 
	    	HISTORY_LIMIT_DATE=#{history_limit_date},
	    	NEW_PARTIAL_ID=#{new_partial_id}
	    WHERE 
	    	MODEL_ID=#{model_id} AND ( PARTIAL_ID=#{partial_id} OR NEW_PARTIAL_ID=#{partial_id}) AND POSITION_ID=#{position_id}
	   ]]>
 </update>

 <update id="updatePartialPositionQuantity" parameterType="PartialPositionEntity">
	   <![CDATA[
	    UPDATE 
	    	PARTIAL_POSITION_BELONG
	    SET 
	    	POSITION_ID = #{position_id},
	    	QUANTITY = #{quantity}
	    WHERE 
	    	MODEL_ID=#{model_id} AND BOM_CODE=#{bom_code}
	   ]]>
 </update>

 <update id="updatePartialPositionOldHistoryLimitDate" parameterType="PartialPositionEntity">
 	   <![CDATA[
 	    update 
 	    	partial_position_belong 
		set 
			history_limit_date=#{history_limit_date}
 	    where 
 	    	partial_id=#{old_partial_id} 
 	    	and model_id=#{model_id}
 	    	and position_id=#{position_id};
 	 ]]>
 </update>
 
  <insert id="insertPartialWasteModifyHistory" parameterType="PartialPositionEntity">
	   <![CDATA[
	    INSERT INTO 
	    	PARTIAL_WASTE_MODIFY_HISTORY(
	    	MODEL_ID,
	    	OLD_PARTIAL_ID,
	    	NEW_PARTIAL_ID,
	    	UPDATED_BY,
	    	UPDATED_TIME,
	    	ACTIVE_DATE)
	   VALUES 
	    	(#{model_id},#{partial_id},#{new_partial_id},#{updated_by},current_timestamp,#{history_limit_date})
	   ]]>
 </insert>

 <select id="getInstructOfModel" resultType="PartialPositionEntity" parameterType="String">
		SELECT 
			PPB.`partial_id`, PA.code, PA.name, PA.price, `parent_partial_id`, PA_P.CODE as parent_partial_code,
			`bom_code`, sum(`quantity`) as quantity, group_concat(concat(PO.process_code, ':', `quantity`) separator ';') as process_code,
			group_concat(PO.line_id separator ';') as line_id
		FROM
			PARTIAL_POSITION_BELONG PPB
		JOIN 
			PARTIAL PA
		ON 
			PPB.PARTIAL_ID = PA.PARTIAL_ID
		LEFT JOIN 
			PARTIAL PA_P
		ON 
			PPB.parent_partial_id = PA_P.PARTIAL_ID
		LEFT JOIN 
			POSITION PO
		ON 
			PPB.POSITION_ID = PO.POSITION_ID
		WHERE
			MODEL_ID=#{model_id}
		AND 
			current_date between active_date and history_limit_date
		GROUP BY bom_code
		ORDER BY parent_partial_id, code
 </select>

 <select id="getInstructOfCategoryKind" resultType="PartialPositionEntity" parameterType="String">
		SELECT 
			ppb.model_id, MDL.name as model_name, PPB.`partial_id`, PA.code, `parent_partial_id`, PA_P.CODE as parent_partial_code,
            active_date,history_limit_date,
			`bom_code`, sum(`quantity`) as quantity, group_concat(concat(PO.process_code, ':', `quantity`) separator ';') as process_code
		FROM
			PARTIAL_POSITION_BELONG PPB
		JOIN 
			PARTIAL PA
		ON 
			PPB.PARTIAL_ID = PA.PARTIAL_ID
		JOIN
			v_model MDL
		ON
			PPB.model_id = MDL.MODEL_ID
		LEFT JOIN 
			PARTIAL PA_P
		ON 
			PPB.parent_partial_id = PA_P.PARTIAL_ID
		LEFT JOIN 
			POSITION PO
		ON 
			PPB.POSITION_ID = PO.POSITION_ID
		WHERE
			MDL.kind=#{kind} and mdl.delete_flg = 0
		GROUP BY ppb.model_id, PPB.parent_partial_id, ppb.partial_id, ppb.bom_code
		ORDER BY model_name, parent_partial_code, code
 </select>

 <select id="getAllInstructOfModel" resultType="PartialPositionEntity" parameterType="String">
		SELECT 
			ppb.model_id, MDL.name as model_name, PPB.`partial_id`, PA.code, `parent_partial_id`, PA_P.CODE as parent_partial_code,
            active_date,history_limit_date,
			`bom_code`, sum(`quantity`) as quantity, group_concat(concat(PO.process_code, ':', `quantity`) separator ';') as process_code
		FROM
			PARTIAL_POSITION_BELONG PPB
		JOIN 
			PARTIAL PA
		ON 
			PPB.PARTIAL_ID = PA.PARTIAL_ID
		JOIN
			model MDL
		ON
			PPB.model_id = MDL.MODEL_ID
		LEFT JOIN 
			PARTIAL PA_P
		ON 
			PPB.parent_partial_id = PA_P.PARTIAL_ID
		LEFT JOIN 
			POSITION PO
		ON 
			PPB.POSITION_ID = PO.POSITION_ID
		WHERE
			MDL.model_id=#{model_id} and mdl.delete_flg = 0
		GROUP BY ppb.model_id, PPB.parent_partial_id, ppb.partial_id, ppb.bom_code
		ORDER BY parent_partial_code, code
 </select>


 <select id="getComponentOfModel" resultType="String" parameterType="String">
	SELECT ptl.code FROM partial ptl
	JOIN PARTIAL_POSITION_BELONG ppb
	on ppb.PARTIAL_ID = ptl.PARTIAL_ID
	and MODEL_ID=#{model_id}
	where order_flg = 2;
 </select>


 <select id="getNoneBelonsModels" resultType="ModelEntity">
	select mdl.model_id, mdl.name as name, ctg.NAME as category_name from model mdl
	join category ctg
		on mdl.category_id = ctg.CATEGORY_ID
	join model_level_set mls
		on mls.model_id = mdl.model_id
	where mdl.delete_flg = 0
		and not exists (select 1 from partial_position_belong where model_id = mdl.model_id)
		and ctg.kind between 1 and 7
	group by mdl.model_id
	order by ctg.kind, mdl.name;
 </select>

</mapper>